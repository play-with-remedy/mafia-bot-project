package mafia_bot;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Unmodifiable;
import org.telegram.telegrambots.bots.TelegramWebhookBot;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updates.SetWebhook;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.List;
import java.util.Map;

public class MafiaBot extends TelegramWebhookBot  {

    private final Map<String, String> rules;

    public MafiaBot(Map<String, String> rules) {
        this.rules = rules;
    }

    @Override
    public BotApiMethod<?> onWebhookUpdateReceived(@NotNull Update update) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ callback-–∑–∞–ø—Ä–æ—Å–∞
        if (update.hasCallbackQuery()) {
            String callbackData = update.getCallbackQuery().getData();
            long chatId = update.getCallbackQuery().getMessage().getChatId();
            return handleCallbackQuery(chatId, callbackData);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (update.getMessage() != null && update.getMessage().hasText()) {
            String text = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();

            System.out.println("Received message: " + text);

            if (text.equals("/start")) {
                return sendInlineKeyboard(chatId); // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            }
        }

        return null; // –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–≤–µ—Ç–∞
    }

    private @NotNull SendMessage sendInlineKeyboard(long chatId) {
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = getButtonLists();
        inlineKeyboardMarkup.setKeyboard(rows);

        SendMessage message = new SendMessage(Long.toString(chatId), "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ä–∞–∑–¥–µ–ª:");
        message.setReplyMarkup(inlineKeyboardMarkup);

        try {
            execute(message);
            System.out.println("Sent inline keyboard to chatId: {}" + chatId);
        } catch (Exception e) {
            System.out.println("Error sending message with inline keyboard: " + e);
        }

        return message; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º SendMessage, –∫–æ—Ç–æ—Ä—ã–π Telegram –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    }

    private static @NotNull @Unmodifiable List<List<InlineKeyboardButton>> getButtonLists() {
        InlineKeyboardButton foulButton = new InlineKeyboardButton("–§–æ–ª ‚öñÔ∏è");
        foulButton.setCallbackData("foul");

        InlineKeyboardButton yellowCartButton = new InlineKeyboardButton("–ñ–µ–ª—Ç–∞—è üü®");
        yellowCartButton.setCallbackData("yellow");

        InlineKeyboardButton redsCartButton = new InlineKeyboardButton("–ö—Ä–∞—Å–Ω–∞—è üü•");
        redsCartButton.setCallbackData("red");

        InlineKeyboardButton disqualifyingButton = new InlineKeyboardButton("–£–¥–∞–ª–µ–Ω–∏–µ üö´");
        disqualifyingButton.setCallbackData("disqualifying");

        InlineKeyboardButton teamLossButton = new InlineKeyboardButton("–ü–ü–ö üî¥");
        teamLossButton.setCallbackData("teamLoss");

        InlineKeyboardButton specSituationButton = new InlineKeyboardButton("–û—Å–æ–±—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ ‚ö†Ô∏è");
        specSituationButton.setCallbackData("specSituation");

        return List.of(
                List.of(foulButton, yellowCartButton),
                List.of(redsCartButton, disqualifyingButton),
                List.of(teamLossButton, specSituationButton)
        );
    }

    private @NotNull SendMessage handleCallbackQuery(long chatId, @NotNull String callbackData) {
        String response = switch (callbackData) {
            case "foul" -> rules.get("foul");
            case "yellow" -> rules.get("yellow");
            case "red" -> rules.get("red");
            case "disqualifying" -> rules.get("disqualifying");
            case "teamLoss" -> rules.get("teamLoss");
            case "specSituation" -> rules.get("specSituation");
            default -> "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.";
        };

        return sendMessage(chatId, response); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    }

    private @NotNull SendMessage sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage(Long.toString(chatId), text);
        message.enableMarkdown(true);

        try {
            execute(message);
            System.out.println("Message sent to chatId: {}" + chatId);
        } catch (Exception e) {
            System.out.println("Error sending message: " + e);
        }

        return message; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º SendMessage –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram API
    }

    @Override
    public String getBotUsername() {
        return "bmf_rules_bot";
    }

    @Override
    public String getBotToken() {
        return "7673511304:AAEcROKIfhRcZDFb6wAyoii-i0rwer5gbMk";
    }

    @Override
    public String getBotPath() {
        return "/bmf-rules"; // –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –¥–ª—è Webhook
    }

    public void setWebhook() {
        String webhookUrl = "https://fierce-oasis-69058-93ed7aa5961d.herokuapp.com" + getBotPath();
        SetWebhook setWebhook = new SetWebhook();
        setWebhook.setUrl(webhookUrl);

        try {
            execute(setWebhook);  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
        } catch (TelegramApiException e) {
            System.out.println("Error setting webhook: " + e);
        }
    }
}